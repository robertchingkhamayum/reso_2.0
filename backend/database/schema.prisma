generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sadmin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  name     String
  password String
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  name     String
  password String
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  Int    @unique // One Admin per Event
}

model Event {
  id            Int            @id @default(autoincrement())
  event         String         @unique
  date          String
  fee           String
  description   String
  paymentQr     String
  registrations Registration[]
  admin         Admin? // This side does NOT need @relation()
  userEvent     EventUser[]
}

model EventUser {
  id             Int          @id @default(autoincrement())
  email          String
  event          Event        @relation(fields: [eventId], references: [id])
  eventId        Int
  registration   Registration @relation(fields: [registrationId], references: [id])
  registrationId Int
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String
  password      String
  registrations Registration[]
}

model Registration {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  name          String
  gender        String?
  contact       String
  address       String
  transactionId String
  bankingName   String
  paymentUrl    String
  approved      Boolean  @default(false)
  individual    Boolean  @default(true)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  team      Team[]
  eventUser EventUser[]
}

model Team {
  id       Int    @id @default(autoincrement())
  teamName String
  players  Json

  registration   Registration @relation(fields: [registrationId], references: [id])
  registrationId Int
}
